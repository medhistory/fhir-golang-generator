<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="using"></a>
<h3>Using GraphDefinitions</h3>
<p>
The GraphDefinition resource can be used to:
</p>
<ul>
 <li>Summarize a set of profiles on resources</li>
 <li>Define a graph of resources to return in a query</li>
 <li>Define a graph of resources to include in a document</li>
 <li>Document rules about the relationship between a set of resources e.g. must all resources concern the same patient?</li>
</ul>

<a name="summary"></a>
<h4>Summarize a set of profiles on resources</h4>
<p>
FHIR resources are relatively granular. In many/most cases, many resources 
are needed to handle any particular task. A typical example of this is a complex
diagnostic report: it will start with a DiagnosticReport, which will link
to a set of panels (Observation resources), each of which link to a set of 
Observation resources for atomic data items.
</p>
<p>
One way to represent this is to profile each of the resources, creating 
hundreds of profiles, and then leave it to the user to infer the overall pattern
of the report from the detailed profiles for each observation in the report. 
But it's not easy to see the forest for the trees. A GraphDefinition can 
summarize the overall picture and present a summary to the user. 
</p>
<p>
Here's <a href="http://fhir.hl7.org.au/fhir/rcpa/pprofiles.html">an example</a> of 
the kind of summary this represents. (Todo: make this an actual graph definition,
and clone into the main spec)
</p>

<a name="fetch"></a>
<h4>Fetching a graph of resources</h4>
<p>
As another example of using many resources, to completely represent a medication dispense, 
an application needs not only the MedicationDispense resource, but also resources to represent the patient, 
provider, organizations, and the associated prescription.
</p>
<p>
A client can retrieve a single resource:
</p>
<pre>
  GET [base]/MedicationDispense/example
</pre>
<p>
Then, when it reads the returned resource, it can fetch the referenced resources: 
</p>
<pre>
  GET [base]/Patient/example
  GET [base]/Practitioner/example
  GET [base]/MedicationRequest/example
  ... etc.
</pre>
<p>
This is a very inefficient way to retrieve all the required resources. An alternative 
approach is to do a search, and _include the required resources:
</p>
<pre>
  GET [base]/MedicationDispense?_id=example
    &amp;_include=MedicationDispense:authorizingPrescription
    &amp;_include=MedicationDispense:subject
</pre>
<p>
But scaling this approach to fetch a full package with its dependencies
becomes increasingly difficult as the package gets deeper. A graph definition
can be used instead to inform the server what to return with the resource using the <a href="resource-operation-graph.html">$graph operation</a>:
</p>
<pre>
  GET [base]/MedicationDispense/example/$graph?graph=med-package
</pre>
<p>
This is a request to return a graph of resource, using the graph definition 
'med-package'. In this case, the graph definition would look approximately 
like this:
</p>
<pre>
MedicationDispense
  .subject
  .context
  .performer.actor
  .authorizingPrescription
     .requester.agent 
  .substitution.responsibleParty
</pre>

<p>
Systems may either provide a pre-defined list of graph definitions that clients may choose
from, or allow clients to define their own GraphDefinition resources and then refer to them.
</p>
<p>
Server may also allow clients also pass in their own graph definition using a text representation:
</p>
<pre>
  GET [base]/MedicationDispense/example/$graph?definition=Patient{managingOrganization:Organization{endpoint:Endpoint}}
</pre>
<p>
See below for further details.
</p>

<a name="document"></a>
<h4>Building a document</h4>
<p>
A very similar issue applies when building a document using the <a href="composition-operation-document.html">$document operation</a>. 
A document must include all the resources linked directly from the composition, but 
whether to include additional linked resources is at the discretion of the document author. How does
the user inform the $document operation which linked resources to include? One option is a boolean flag
for including <b>all</b> linked data, but this may be extensive - up to an entire patient record - and 
may include resources that are not desired.
</p>
<p>
An operation can use a graph definition as a parameter to the $document operation:
</p>
<pre>
GET [base]/Composition/example/$document?graph=example
</pre>
<p>
This tells the server to include the graph of resources defined 
in the <a href="graphdefinition-example.html">example GraphDefinition</a> - in this case,
any resources referred to from lists, when the section content is a list. Alternatively,
servers may allow a client to pass in a definition directly (as shown above) using
the parameter <code>definition</code>.
</p>

<a name="rules"></a>
<h4>Document Relationship rules</h4>
<p>
One important question about the use of resources is cross-resource consistency. 
For example, if an Observation refers to both a Patient and Encounter, does the 
Encounter have to refer to the same patient? 
</p>
<p>
In general, the answer to this is that it usually should - the record needs to be 
consistent. However there are edge cases where the references may differ. For 
example, with regard to patient references, they may differ for:
</p>
<ul>
 <li>Health Records concerning mother and baby</li>
 <li>Organ Transplants</li>
 <li>Counselling, particularly family counselling</li>
</ul>
<p>
Other reasons for the references to differ - mixing records about the same patient
from different servers, or specific records about patients mixed with records
about groups of patients (particularly common in veterinarian care).
</p>
<p>
The <code>GraphDefinition</code> resource allows for compartment consistency rules
to be made regarding the links between resources. For each link in the graph, the
graph definition can make a rule about the compartment consistency. The rule 
can specify one of the following consistencies:
</p>
<table class="codes">
<tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>
<tr><td>identical</td><td>The compartment must be identical (the same literal reference)</td></tr>
<tr><td>matching</td><td>The compartment must be the same - the record must be about the same patient, but the reference may be different</td></tr>
<tr><td>different</td><td>The compartment must be different</td></tr>
<tr><td>custom</td><td>The compartment rule is defined in the accompanying FHIRPath expression</td></tr>
</table>
<p>
Todo: how would this be validated? - where is the graph referred to?
</p>

<a name="examples"></a>
<h3>Simple Examples</h3>

<p>
GraphDefinition can walk a graph forward through the links, which is the natural order.
As an example, consider a profile on composition that wants to specify that the graph
follows the section entry into a list:
</p>
<pre class="xml">
    &lt;!-- 
      starting from a Composition...
    --&gt;
  &lt;link&gt;
    &lt;!-- 
      follow and Composition.section.entry that refers to a list
    --&gt;
    &lt;path value=&quot;Composition.section.entry&quot;/&gt;
    &lt;target&gt;
      &lt;type value=&quot;List&quot;/&gt;      
      &lt;!-- and inside this list, follow any items --&gt;
      &lt;link&gt;
        &lt;path value=&quot;List.entry.item&quot;/&gt;
        &lt;target&gt;
          &lt;type value=&quot;Resource&quot;/&gt; 
        &lt;/target&gt;
      &lt;/link&gt;      
    &lt;/target&gt;
  &lt;/link&gt;
</pre>

<p>
The pattern can be extended to require that the none of the resources 
in this little graph reference a different patient - that is, it is a 
requirement when traversing the links that the patient compartment
remain identical:
</p>
<pre class="xml">
  &lt;link&gt;
    &lt;path value=&quot;Composition.section.entry&quot;/&gt;
    &lt;target&gt;
      &lt;type value=&quot;List&quot;/&gt;      
        &lt;compartment&gt;
          &lt;use value=&quot;requirement&quot;/&gt;
          &lt;code value=&quot;Patient&quot;/&gt;
          &lt;rule value=&quot;identical&quot;/&gt;
        &lt;/compartment&gt;
      &lt;/target&gt;
      &lt;link&gt;
        &lt;path value=&quot;List.entry.item&quot;/&gt;
        &lt;description value=&quot;Include any list entries&quot;/&gt;
        &lt;target&gt;
          &lt;type value=&quot;Resource&quot;/&gt; 
          &lt;compartment&gt;
            &lt;use value=&quot;requirement&quot;/&gt;
            &lt;code value=&quot;Patient&quot;/&gt;
            &lt;rule value=&quot;identical&quot;/&gt;
          &lt;/compartment&gt;
        &lt;/target&gt;
      &lt;/link&gt;      
    &lt;/target&gt;
  &lt;/link&gt;
</pre>

<p>
Another useful approach is to walk any link * (e.g. wildcard support):
</p>
<pre class="xml">
  &lt;link&gt;
    &lt;!-- 
      follow all links that refers to a list
    --&gt;
    &lt;path value=&quot;*&quot;/&gt;
    &lt;target&gt;
      &lt;type value=&quot;List&quot;/&gt;      
      &lt;!-- and inside this list, follow any references --&gt;
      &lt;link&gt;
        &lt;path value=&quot;*&quot;/&gt;
        &lt;target&gt;
          &lt;type value=&quot;Resource&quot;/&gt; 
        &lt;/target&gt;
      &lt;/link&gt;      
    &lt;/target&gt;
  &lt;/link&gt;
</pre>
<p>
or you can follow any links in any resource:
</p>
<pre class="xml">
  &lt;link&gt;
    &lt;!-- 
      follow all links 
    --&gt;
    &lt;path value=&quot;*&quot;/&gt;
    &lt;target&gt;
      &lt;type value=&quot;Resource&quot;/&gt;      
      &lt;!-- and inside the target, follow any links --&gt;
      &lt;link&gt;
        &lt;path value=&quot;*&quot;/&gt;
        &lt;target&gt;
          &lt;type value=&quot;Resource&quot;/&gt; 
        &lt;/target&gt;
      &lt;/link&gt;      
    &lt;/target&gt;
  &lt;/link&gt;
</pre>

<p>
It's also possible to build a graph by walking links in reverse.
This technique is useful, for example, when including provenance resources in a document:
</p>

<pre class="xml">
  &lt;link&gt;
    &lt;!-- if the path is missing &lt;path value=&quot;&quot;/&gt; --&gt;
    &lt;target&gt;
      &lt;!-- 
        any provenance
      --&gt;
      &lt;type value=&quot;Provenance&quot;/&gt;
      &lt;!--
        and specify the search parameters to include 
        all the provenances that refer to this resource
      --&gt;
      &lt;params value=&quot;target={ref}&quot;/&gt;      
    &lt;/target&gt;
  &lt;/link&gt;
</pre>

<a name="text"></a>
<h4>Text Representation</h4>
<p>
For convenience, a graph definition may be represented using a text short hand form, loosely based
on the <a href="graphql.html">graphQL language</a>. A graph definition is introduced by the 
name of the Resource (<code>GraphDefinition.start</code>, followed by an optional profile
in parentheses (<code>GraphDefinition.profile</code>, then a group of links, surrounded 
by <code>{</code> and <code>}</code>:
</p>
<pre>
Patient(http://hl7.org/fhir/us/core/Patient) { 
}
</pre>
<p>
Between the brackets are one or more links (<code>GraphDefinition.link</code>), separated by commas. 
Links statements can either be path-based look ups, or a search to perform a reverse lookup:
</p>
<pre>
Patient { 
  managingOrganization : Organization,
  generalPractitioner : Practitioner,
  search Observation?patient={ref}
}
</pre>
<p>
The format for a path-based look up is:
</p>
<pre>
  [path] cardinality [min]..[max] '[description]' : [ResoureType rules]
</pre>
<p>
where:
</p>
<ul>
 <li>path = <code>GraphDefinition.link.path</code></li>
 <li>cardinality [min]..[max] is optional, and min = <code>GraphDefinition.link.min</code> and max = <code>GraphDefinition.link.max</code> </li>
 <li>description is optional, and = <code>GraphDefinition.link.description</code> </li>
</ul>
<p>
The resource type rules statement consists of one or more of the following, separated by <code>;</code> characters:
</p>
<pre>
  [ResourceType] (profile)  
</pre>
<p>
where:
</p>
<ul>
 <li>ResourceType = <code>GraphDefinition.link.target.type</code></li>
 <li>profile is optional, and = <code>GraphDefinition.link.target.profile</code></li>
 <li>description is optional, and = <code>GraphDefinition.link.description</code> </li>
</ul>
<p>
In addition, the resource type rule may be followed by a links section, surrounded
by <code>{}</code>, with the content as described above.
</p>
<p>
Search statements for reverse look ups have a slightly different format:
</p>
<pre>
Patient{ 
  search [ResourceType]?[params] cardinality [min]..[max] '[description]' 
}
</pre>
<p>
where:
</p>
<ul>
 <li>ResourceType = <code>GraphDefinition.link.target.type</code></li>
 <li>params = <code>GraphDefinition.link.target.params</code></li>
 <li>cardinality [min]..[max] is optional, and min = <code>GraphDefinition.link.min</code> and max = <code>GraphDefinition.link.max</code> </li>
 <li>description is optional, and = <code>GraphDefinition.link.description</code> </li>
</ul>
<p>
In this format, the amount of whitespace, and its form, is irrelevant. For the purposes
of clarity, the examples here are laid out on different lines, but this is not required.
When a GraphDefinition is used as a parameter in a url, no whitespace is used.
</p>

<p>
Here is a full example that uses all the features of the syntax:
</p>
<pre>

Patient(http://hl7.org/fhir/us/core/Patient) { 
  managingOrganization cardinality 0..1 'description of item' : 
    Organization(http://hl7.org/fhir/us/core/Organization) { 
      endpoint : Endpoint 
    };
    Basic;
    Group { 
      item : Patient 
    },
  generalPractitioner : Organization,
  search Observation?patient={ref} cardinality 0..10 'Observations for the patient' {
    performer : Practitioner,
    related.where(type='has-member').target : Observation require matching Patient,
    related.where(type='derived-from').target : Observation where identical Patient,
    related.where(type='sequel-to').target : Observation where different Patient,
    related.where(type='qualified-by').target : Observation where custom Patient = path
  }
}
</pre>

</div>
